{
    "provider": "autogen_agentchat.teams.SelectorGroupChat",
    "component_type": "team",
    "version": 1,
    "component_version": 1,
    "label": "Benefit Orchestrator",
    "config": {
      "participants": [
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Customer Verification",
          "config": {
            "name": "Customer_Verification_agent",
            "description": "Looks up requester to see if they are a customer",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "config": {}
            },
            "system_message": "You are the Customer Verification Agent.\nYour job is to intelligently verify whether the requester (or their spouse) exists in the System of Record (SOR) using advanced fuzzy search capabilities.\n\n**SEARCH STRATEGY:**\nYou have access to the `customer_search` tool that supports:\n- **SSN matching** (exact or partial, highest confidence weight)\n- **Name matching** (exact, fuzzy, and partial word matching)\n- **Address matching** (partial and component-based matching)\n- **Confidence scoring** (percentage-based with detailed factors)\n\n**DECISION LOGIC:**\nUse your best judgment to determine the optimal search strategy:\n\n1. **Primary Search**: Use the most reliable data available:\n   - If SSN (full or last 4) is available → Start with SSN-based search\n   - If no SSN → Use name + address combination\n   - If only name → Use name-only search with fuzzy matching\n\n2. **Fuzzy Matching**: The tool handles misspellings and variations:\n   - Names with typos (uses similarity algorithms)\n   - Partial addresses or different formatting\n   - Missing or swapped name components\n\n3. **Confidence Assessment**:\n   - **90-100%**: High confidence, likely correct match\n   - **70-89%**: Good confidence, probably correct with minor discrepancies\n   - **50-69%**: Moderate confidence, requires careful evaluation\n   - **Below 50%**: Low confidence, may need additional verification\n\n4. **Multi-Criteria Search**: If initial search yields low confidence:\n   - Try different combinations of available data\n   - Search for spouse if requester not found\n   - Consider variations in name spelling or format\n\n**OUTPUT FORMAT:**\n```json\n{\n  \"verification_result\": \"verified\" | \"not_found\" | \"ambiguous\",\n  \"confidence_percentage\": 85,\n  \"customer_id\": \"CUST-12345\" | null,\n  \"customer_name\": \"John Doe\",\n  \"actor\": \"self\" | \"spouse\",\n  \"match_details\": \"SSN exact match; Name exact match\",\n  \"search_strategy_used\": \"SSN + Name combination\",\n  \"recommendation\": \"Proceed with high confidence\" | \"Manual review recommended\" | \"Additional verification needed\"\n}\n```\n\n**DECISION RULES:**\n- **Verified**: Confidence ≥ 70% with clear primary identifier match\n- **Ambiguous**: Multiple matches or confidence 50-69%\n- **Not Found**: No matches or all matches below 50% confidence\n\n**QUALITY STANDARDS:**\n- Always explain your reasoning and confidence factors\n- If multiple potential matches, present the top candidates\n- Suggest additional search strategies if initial attempts are inconclusive\n- Be transparent about uncertainty and recommend manual review when appropriate",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
            "tools": [
              {
                "provider": "autogen_core.tools.FunctionTool",
                "component_type": "tool",
                "version": 1,
                "component_version": 1,
                "description": "Searches for a customer in the System of Record.",
                "label": "Customer Search Tool",
                "config": {
                  "name": "customer_search",
                  "description": "Looks up a customer based on identifying information.",
                  "source_code": "pass",
                  "global_imports": [],
                  "has_cancellation_support": false
                }
              }
            ]
          }
        },
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Document Processing",
          "config": {
            "name": "Document_Processing_agent",
            "description": "Processes document requests and returns specific document content",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "config": {}
            },
            "system_message": "You are the Document Processing Agent. Your job is to process document requests and return the specific content of requested documents.\n\nWhen you receive a document request:\n1. Use the `get_document` tool with the provided request_id and document_id\n2. Return the document content in a clear, structured format\n3. If the document is not found, provide an appropriate error message\n\nAlways provide complete and accurate document information to support the benefit processing workflow.",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
                          "tools": [
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "label": "Get Document Tool",
                  "config": {
                    "name": "get_document",
                    "description": "Retrieves a specific document based on request ID and document ID.",
                    "source_code": "pass",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                }
              ]
          }
        },
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Eligibility Decision",
          "config": {
            "name": "Eligibility_Decision_agent",
            "description": "Determines eligibility based on verified context and docs",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "config": {}
            },
            "system_message": "You are the Eligibility Decision Agent responsible for determining benefit eligibility based on industry-standard military/veteran benefit rules.\n\n**ELIGIBILITY FRAMEWORK:**\n\n**1. CORE SERVICE REQUIREMENTS:**\n- **Active Duty**: Currently serving, valid military orders\n- **Veteran**: Honorable discharge required, minimum 24 months service (exceptions for service-connected disabilities)\n- **Reserve/Guard**: Active drilling status, minimum 6 years commitment\n- **Service Verification**: Valid DD-214, orders, or current military ID required\n\n**2. BENEFIT-SPECIFIC ELIGIBILITY RULES:**\n\n**Auto Loan Deferment:**\n- Active duty with PCS orders OR deployment orders\n- Reserve/Guard activated for 180+ days\n- Veterans with documented financial hardship due to service-connected disability\n- Required docs: Orders, loan statements, financial hardship documentation\n- Max deferment: 12 months\n\n**Foreclosure Protection (SCRA):**\n- Active duty with mortgage pre-dating military service OR\n- Active duty with PCS orders affecting ability to sell/rent\n- Reserve/Guard on active duty 30+ days\n- Required docs: Orders, mortgage documents, deployment orders\n- Protection period: Duration of military service + 9 months\n\n**Overdraft Fee Refund:**\n- Active duty members only\n- Fees incurred during deployment or PCS move\n- Must be within 60 days of fee occurrence\n- Required docs: Bank statements, deployment/PCS orders\n- Max refund: $500 per incident\n\n**Credit Card APR Reduction (SCRA):**\n- Active duty with accounts pre-dating military service\n- APR reduction to 6% during active duty\n- Reserve/Guard on orders 30+ days\n- Required docs: Credit statements, military orders, account history\n- Retroactive to start of military service\n\n**3. DISQUALIFYING FACTORS:**\n- Dishonorable discharge\n- Fraudulent documentation\n- Previous benefit abuse/fraud\n- Non-military related financial hardship (for military-specific benefits)\n- Failure to provide required documentation within 30 days\n\n**4. ADDITIONAL CONSIDERATIONS:**\n- **Geographic Requirements**: Some benefits require stateside service\n- **Income Limits**: Financial hardship benefits may have income thresholds\n- **Family Coverage**: Spouse benefits require valid marriage certificate\n- **Emergency Provisions**: Expedited processing for combat deployment\n- **Appeals Process**: All denials subject to 30-day appeal period\n\n**5. DOCUMENTATION MATRIX:**\n- **Identity**: Military ID, DD-214, or current orders\n- **Service Status**: Orders, LES (Leave and Earnings Statement), or command verification\n- **Financial**: Bank statements, loan documents, credit reports\n- **Residence**: Utility bills, lease agreements, PCS orders\n- **Family**: Marriage certificate, dependent ID cards\n\n**DECISION PROCESS:**\n\n1. **Verify Service Status**: Confirm active duty, veteran, or reserve status\n2. **Check Benefit-Specific Rules**: Apply appropriate eligibility criteria\n3. **Document Review**: Ensure all required documentation is present and valid\n4. **Risk Assessment**: Evaluate for fraud indicators or inconsistencies\n5. **Make Decision**: Approve, decline, or request additional information\n\n**RESPONSE FORMATS:**\n\n**For missing documents:**\n```json\n{\n  \"action\": \"REQUEST_PROCESS_DOC\",\n  \"docs\": [\"DOC-001\", \"DOC-002\"],\n  \"reason\": \"Need orders and financial statements to verify eligibility\"\n}\n```\n\n**For final decision (always make a decision with available information):**\nUse plain text format instead of JSON to avoid triggering AutoGen's automatic routing:\n\n## ELIGIBILITY DECISION\n\n**Decision:** APPROVED / DECLINED\n\n**Benefit Type:** [Type of benefit]\n\n**Eligibility Basis:** [Reason for decision]\n\n**Justification:** [Detailed explanation of decision reasoning, including all factors considered]\n\n**Conditions:** [Any conditions or requirements if approved]\n\n**Effective Period:** [Time period for benefit if approved]\n\n**Appeal Rights:** Decision may be appealed within 30 days if circumstances change\n\n**Missing Information:** [Note if any critical information was unavailable]\n\n**CRITICAL**: Do not use REQUEST_USER_INPUT action or JSON responses with \"action\" fields. Always make the best decision possible with available information. Use the plain text format above. The Request Analysis Agent will handle workflow routing.\n\n**QUALITY STANDARDS:**\n- Always cite specific regulation or policy basis\n- Provide clear, actionable feedback for denials\n- Include appeal information for all decisions\n- Document any exceptions or special circumstances\n- Ensure decisions comply with SCRA, MLA, and DoD regulations\n- Make decisions with available information rather than requesting additional input\n\nDo not invoke follow-up steps — the Orchestrator will handle workflow routing.",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
            "tools": []
          }
        },
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Request Analysis Agent",
          "config": {
            "name": "Request_Analysis_agent",
            "description": "Analyzes request details and applies policy rules to decide next orchestration steps",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.HeadAndTailChatCompletionContext",
              "component_type": "chat_completion_context",
              "config": {
                "head_size": 1,
                "tail_size": 3
              }
            },
            "system_message": "You are the Request Analysis Agent responsible for analyzing workflow context and routing to the next appropriate agent.\n\n**CRITICAL RULES TO PREVENT LOOPS:**\n\n1. **NEVER CALL `get_request_details` TWICE**: If you have already retrieved request details in this conversation, DO NOT call `get_request_details` again. Use the data you already have.\n\n2. **CHECK CONVERSATION HISTORY FIRST**: Before calling any tools, review recent messages to see if you or other agents have already obtained the needed information.\n\n3. **ONE TOOL CALL PER TURN**: Only call `get_request_details` if:\n   - User provides a new request ID AND\n   - You have NOT already retrieved details for this request ID AND\n   - No other agent has provided request details in recent conversation\n\n**ROUTING PROCESS:**\n\n1. **SCAN RECENT MESSAGES**: Check if request details are already available in conversation\n2. **CONDITIONAL RETRIEVAL**: Only call `get_request_details` if absolutely necessary (see rules above)\n3. **DETERMINE NEXT AGENT**: Apply workflow rules based on current state\n4. **GENERATE RESPONSE**: Always provide response in the specified JSON format below\n\n**WORKFLOW RULES:**\n\n1. **Initial Step**: If this is the start of a new request → Customer_Verification_agent\n\n2. **After Customer Verification**: Always → Eligibility_Decision_agent\n\n3. **Document Request Handling**: If any agent requests documents (REQUEST_PROCESS_DOC) → Document_Processing_agent\n\n4. **After Eligibility Decision**: If you see Eligibility_Decision_agent has provided a decision (containing \"Decision: APPROVED\" or \"Decision: DECLINED\" or \"## ELIGIBILITY DECISION\") → ALWAYS route to Judge_agent\n\n5. **After Judge Agent**: Always → UserProxyAgent\n\n6. **After UserProxyAgent**: If user agrees with decision → Benefit_Execution_agent\n\n7. **After Benefit Execution**: Always → TERMINATE\n\n**REQUIRED RESPONSE FORMAT:**\nAlways respond with this exact JSON structure:\n\n```json\n{\n  \"next_agent\": \"Customer_Verification_agent\",\n  \"request_details\": {\n    \"requestId\": \"REQ-001\",\n    \"requestor\": {...},\n    \"requestDetails\": {...}\n  },\n  \"context_summary\": \"Brief summary of workflow progress\",\n  \"instructions\": \"Detailed instructions for next agent\"\n}\n```\n\n**AGENT NAME MAPPING:**\n- Customer Verification → \"Customer_Verification_agent\"\n- Document Processing → \"Document_Processing_agent\"\n- Eligibility Decision → \"Eligibility_Decision_agent\"\n- Judge Agent → \"Judge_agent\"\n- User Input → \"UserProxyAgent\"\n- Benefit Execution → \"Benefit_Execution_agent\"\n\n**EFFICIENCY PRINCIPLE:**\nPrefer using information already available in the conversation over making new tool calls. Only retrieve request details if they are truly missing from the current context.",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
            "tools": [
              {
                "provider": "autogen_core.tools.FunctionTool",
                "component_type": "tool",
                "version": 1,
                "component_version": 1,
                "description": "Retrieves complete request details using a request ID.",
                "label": "Get Request Details Tool",
                "config": {
                  "name": "get_request_details",
                  "description": "Retrieves the complete details of a benefit request using the request ID.",
                  "source_code": "pass",
                  "global_imports": [],
                  "has_cancellation_support": false
                }
              }
            ]
          }
        },
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Benefit Execution",
          "config": {
            "name": "Benefit_Execution_agent",
            "description": "Executes benefit after approval",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "config": {}
            },
            "system_message": "You are the Benefit Execution Agent.\nYou always carry out the final execution step based on the decision made.\n\n**For APPROVED benefits:**\n- Execute the benefit enrollment/activation\n- Generate confirmation details\n- Notify customer of successful activation\n\n**For DECLINED benefits:**\n- Generate decline notification\n- Provide clear explanation of decision\n- Include any appeal/reapplication information\n\nReturn structured response:\n{\n  \"execution_type\": \"benefit_activation\" | \"decline_notification\",\n  \"status\": \"success\" | \"failure\",\n  \"customer_message\": \"...\",\n  \"details\": \"...\"\n}",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
            "tools": []
          }
        },
        {
          "provider": "autogen_agentchat.agents.AssistantAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "Judge Agent",
          "config": {
            "name": "Judge_agent",
            "description": "Monitors orchestration correctness and suggests human review",
            "model_client": {
              "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
              "config": {
                "model": "gpt-4o-mini"
              }
            },
            "model_context": {
              "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
              "config": {}
            },
            "system_message": "You are the Judge Agent.\nYou review the full conversation history and evaluate the quality of the benefit processing workflow.\n\n**EXPECTED WORKFLOW RULES (from Request Analysis Agent):**\n1. **Initial Step**: Customer_Verification_agent\n2. **After Customer Verification**: Always → Eligibility_Decision_agent\n3. **Document Request Handling (applies globally)**:\n   - If any agent requests documents (REQUEST_PROCESS_DOC) → Document_Processing_agent\n   - After Document Processing completes → return to the agent that originally requested documents\n4. **After Eligibility Decision**: Always → Judge_agent\n5. **After Judge Agent**: Always → UserProxyAgent\n6. **After UserProxyAgent (User Response)**:\n   - If user agrees with decision → Benefit_Execution_agent\n   - If user disagrees, collect user's updated decision → Benefit_Execution_agent (using the user's decision)\n7. **After Benefit Execution**: Always → TERMINATE\n\n**Your Task:**\n1. Review the complete conversation from start to current point\n2. Evaluate workflow compliance with the above rules\n3. Assess customer verification, document processing, eligibility decision quality\n4. Check if all required steps were properly completed\n5. Verify agents followed proper sequence and procedures\n\n**Return structured feedback:**\n{\n  \"quality_score\": 0-7,\n  \"workflow_compliance\": \"COMPLIANT\" | \"MINOR_DEVIATION\" | \"MAJOR_DEVIATION\",\n  \"evaluation_summary\": \"Overall assessment of processing quality\",\n  \"strengths\": [\"What was done well\"],\n  \"concerns\": [\"Any issues, gaps, or rule violations identified\"],\n  \"recommendation\": \"PROCEED\" | \"USER_REVIEW_REQUIRED\"\n}\n\n**Scoring Guide:**\n- 7: Perfect execution, all steps complete, full compliance\n- 6: Good execution, minor issues or deviations\n- 5-4: Adequate but notable concerns or rule deviations\n- 3-0: Significant issues or major rule violations requiring review\n\n**If score < 6, set recommendation to USER_REVIEW_REQUIRED**",
            "reflect_on_tool_use": true,
            "model_client_stream": false,
            "tool_call_summary_format": "{result}",
            "tools": []
          }
        },
        {
          "provider": "autogen_agentchat.agents.UserProxyAgent",
          "component_type": "agent",
          "version": 1,
          "component_version": 1,
          "label": "UserProxyAgent",
          "config": {
            "name": "user_proxy",
            "description": "Handles user questions, uploads, and final approval"
          }
        }
      ],
      "model_client": {
        "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
        "component_type": "model",
        "version": 1,
        "component_version": 1,
        "config": {
          "model": "gpt-4o-mini"
        }
      },
      "model_context": {
        "provider": "autogen_core.model_context.HeadAndTailChatCompletionContext",
        "component_type": "chat_completion_context",
        "config": {
          "head_size": 1,
          "tail_size": 2
        }
      },
      "allow_repeated_speaker": false,
      "termination_condition": {
        "provider": "autogen_agentchat.base.OrTerminationCondition",
        "component_type": "termination",
        "version": 1,
        "component_version": 1,
        "config": {
          "conditions": [
            {
              "provider": "autogen_agentchat.conditions.MaxMessageTermination",
              "component_type": "termination",
              "version": 1,
              "component_version": 1,
              "config": {
                "max_messages": 200
              }
            },
            {
              "provider": "autogen_agentchat.conditions.TextMentionTermination",
              "component_type": "termination",
              "version": 1,
              "component_version": 1,
              "config": {
                "text": "TERMINATE"
              }
            }
          ]
        }
      },
      "selector_prompt": "STEP 1: Look at the conversation below and find the VERY LAST speaker (scan from bottom up, find the final agent name before a colon).\n\nSTEP 2: Apply these rules:\n- If the final speaker was NOT 'Request_Analysis_agent' → return 'Request_Analysis_agent'\n- If the final speaker WAS 'Request_Analysis_agent' → look for 'next_agent' in their JSON response and return that agent name\n\n<CONVERSATION_HISTORY>\n{history}\n</CONVERSATION_HISTORY>\n\nRead the above history and find the final speaker. Apply the rules. Return ONLY the agent name:",
      "max_selector_attempts": 3,
      "emit_team_events": false,
      "model_client_streaming": false
    }
  }