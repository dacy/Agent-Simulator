# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.



# Lessons

## User Specified Lessons

- You have a python venv in ./py310.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.

## Cursor learned

- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- AutoGen Studio FunctionTool configurations require exact JSON structure matching the Studio-generated format, including specific required fields like model_client_stream, reflect_on_tool_use, tool_call_summary_format, metadata, and proper component descriptions
- Natural language rules in agent system messages are much more reliable than complex tools for workflow orchestration
- AutoGen orchestrator selector_prompt needs very explicit instructions to follow Rule Agent guidance - vague prompts cause routing failures
- AutoGen orchestrators can get stuck in loops if selector prompt doesn't clearly define when to select Rule_agent vs when to select the suggested business agent
- AutoGen SelectorGroupChat selector_prompt must use proper variables {history}, {roles}, {participants} to access conversation context - without these the orchestrator only sees its system prompt

# Scratchpad

## Current Task: AutoGen Studio Rule Agent Natural Language Implementation

### Problem Solved
[X] Replaced complex `suggest_next_step` tool with natural language workflow rules
[X] Updated Rule Agent system message with clear, structured rules
[X] Removed the Rule Agent tool file and dependencies
[X] Regenerated combined orchestrator with the new approach
[X] Enabled `reflect_on_tool_use: true` for all agents
[X] Fixed orchestrator selector prompt to properly follow Rule Agent guidance
[X] Resolved orchestrator loop issue with speaker-based selection logic
[X] Fixed critical issue: orchestrator wasn't receiving conversation history

### Key Implementation
The Rule Agent now uses natural language rules directly in its system message instead of a complex tool:

**WORKFLOW RULES:**
1. **Initial Step**: Customer_Verification_agent
2. **After Customer Verification**: → Eligibility_Decision_agent (regardless of found/not found)
3. **After Document Processing**: → Customer_Verification_agent
4. **After Eligibility Decision**: 
   - approve → Benefit_Execution_agent
   - decline → TERMINATE
   - REQUEST_PROCESS_DOC → UserProxyAgent
   - REQUEST_USER_INPUT → UserProxyAgent
5. **After Benefit Execution**: → TERMINATE
6. **Error/Unclear Cases**: → Judge_agent

### Critical Fix: Orchestrator Conversation History Access
**The Issue:** The orchestrator selector was only seeing its system prompt, not the Rule Agent's responses or conversation history.

**The Solution:** Updated selector prompt to use proper AutoGen variables:
- `{history}` - provides conversation history
- `{roles}` - provides agent descriptions
- `{participants}` - provides available agent names
- Set `allow_repeated_speaker: true` to enable proper flow

**Key Discovery:** AutoGen SelectorGroupChat requires specific variable syntax to access conversation context. Without these variables, the orchestrator operates blind to previous messages.

### Benefits of This Approach
- ✅ **Simpler and more reliable** - LLMs excel at following natural language instructions
- ✅ **No complex conversation history parsing** required
- ✅ **Easier to debug and modify** rules
- ✅ **Eliminates FunctionTool compilation issues** for rule logic
- ✅ **More maintainable** - rules are visible in the configuration
- ✅ **Fixed orchestrator routing** - now follows Rule Agent guidance precisely
- ✅ **Prevents orchestrator loops** - clear speaker alternation pattern
- ✅ **Proper conversation access** - orchestrator can see full conversation history

### Current Status
The Rule Agent uses natural language rules and the orchestrator now has proper access to conversation history using AutoGen's required variable syntax. This should completely resolve the routing issues.

### Next Steps
[ ] Test the updated configuration in AutoGen Studio
[ ] Verify orchestrator can see Rule Agent responses in the conversation history
[ ] Verify proper workflow progression following Rule Agent guidance
[ ] If successful, this approach can be considered the final solution
