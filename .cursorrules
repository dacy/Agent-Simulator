# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.



# Lessons

## User Specified Lessons

- You have a python venv in ./py310.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.

## Cursor learned

- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- AutoGen Studio FunctionTool configurations require exact JSON structure matching the Studio-generated format, including specific required fields like model_client_stream, reflect_on_tool_use, tool_call_summary_format, metadata, and proper component descriptions
- Natural language rules in agent system messages are much more reliable than complex tools for workflow orchestration
- AutoGen orchestrator selector_prompt needs very explicit instructions to follow Rule Agent guidance - vague prompts cause routing failures
- AutoGen orchestrators can get stuck in loops if selector prompt doesn't clearly define when to select Rule_agent vs when to select the suggested business agent
- AutoGen SelectorGroupChat selector_prompt must use proper variables {history}, {roles}, {participants} to access conversation context - without these the orchestrator only sees its system prompt
- UserProxyAgent in AutoGen Studio is for user input collection only - it should NOT have a function_map, just name and description fields

# Scratchpad

## Current Task: AutoGen Studio Rule Agent Natural Language Implementation

### Problem Solved
[X] Replaced complex `suggest_next_step` tool with natural language workflow rules
[X] Updated Rule Agent system message with clear, structured rules
[X] Removed the Rule Agent tool file and dependencies
[X] Regenerated combined orchestrator with the new approach
[X] Enabled `reflect_on_tool_use: true` for all agents
[X] Fixed orchestrator selector prompt to properly follow Rule Agent guidance
[X] Resolved orchestrator loop issue with speaker-based selection logic
[X] Fixed critical issue: orchestrator wasn't receiving conversation history
[X] Updated workflow rules to new streamlined sequential flow
[X] Implemented Mock Data Injection System
[X] Updated Requests Structure - removed customerId field, added requestor blocks
[X] Renamed Rule Agent to Request Analysis Agent with enhanced capabilities
[X] Fixed tool injection matching logic in combine_tools.py
[X] FIXED JSON SYNTAX VIOLATION - Removed unnecessary function_map from UserProxyAgent
[X] **ENHANCED REQUEST ANALYSIS AGENT** - Now provides comprehensive briefings with request details and specific instructions
[X] **ENHANCED CUSTOMER VERIFICATION AGENT** - Now supports intelligent fuzzy search with confidence scoring

### Current Status
The AutoGen Studio configuration is now complete and generates valid JSON. Key achievements:

✅ **Enhanced Customer Verification Agent**
- **Intelligent Search Strategy**: Uses best judgment to determine optimal search approach
- **Fuzzy Matching**: Handles misspellings and variations in names/addresses
- **Confidence Scoring**: Percentage-based confidence with detailed factor analysis
- **Multi-Criteria Search**: SSN (40%), Name (30%), Address (30%) weighted scoring
- **Decision Logic**: Clear confidence thresholds (90-100% high, 70-89% good, 50-69% moderate, <50% low)
- **Structured Output**: JSON response with verification result, confidence, match details, and recommendations

✅ **Enhanced Request Analysis Agent**
- Now provides comprehensive briefings instead of just agent names
- Retrieves and presents complete request details
- Gives specific, detailed instructions to the next agent
- Includes context summary of workflow progress
- Updated orchestrator selector to parse the new format
- **NEW**: Case insensitive request ID search
- **NEW**: Requests user input when request ID not found instead of terminating

✅ **Clean UserProxyAgent Configuration**
- Removed unnecessary function_map injection completely
- UserProxyAgent now has only name and description (proper AutoGen Studio format)
- Valid JSON syntax throughout the configuration

✅ **Working Mock Data System**
- Centralized mock data in JSON files
- Build-time injection of realistic data
- Tools use actual mock data instead of hard-coded dummy data

✅ **Request Analysis Agent**
- Successfully renamed from Rule Agent
- Added get_request_details tool for retrieving complete request information
- Tool source code properly injected into agent configuration
- **NEW**: Comprehensive briefing format with detailed instructions for next agents
- **NEW**: Case insensitive request ID matching (REQ-001 = req-001 = Req-001)
- **NEW**: Requests detailed user input when invalid request ID provided (collects full requestor info, military service details, benefit request details, and supporting documents)

✅ **Tool Integration Working**
- All agent tools properly injected with mock data
- Customer Verification, Document Processing, and Request Analysis tools functional
- No more JSON syntax violations
- **NEW**: All ID-based searches are case insensitive (request IDs, document IDs)

✅ **Case Insensitive ID Searches**
- **Request Analysis Agent**: Case insensitive request ID search
- **Document Processing Agent**: Case insensitive request ID and document ID search
- **Flexible Input**: Users can use any case format for IDs (REQ-001, req-001, Req-001, DOC-001, doc-001, etc.)
- **Proper Response Mapping**: Returns actual case format in responses while accepting any case input

### Customer Verification Agent Enhancement Details
**Enhanced Tool Capabilities:**
- **Fuzzy Name Matching**: Uses difflib.SequenceMatcher for similarity scoring
- **Partial SSN Matching**: Handles last 4 digits or full SSN formats
- **Address Component Matching**: Matches individual address parts and partial addresses
- **Confidence Factors**: Detailed breakdown of what contributed to the match score
- **Smart Weighting**: SSN (40%), Name (30%), Address (30%) for balanced assessment

**Enhanced Agent Intelligence:**
- **Search Strategy Selection**: Chooses optimal approach based on available data
- **Confidence Assessment**: Clear guidelines for interpreting match quality
- **Multi-Criteria Fallback**: Tries different combinations if initial search fails
- **Spouse Search Capability**: Can search for spouse if requester not found
- **Quality Standards**: Transparent about uncertainty, recommends manual review when appropriate

**Output Format:**
```json
{
  "verification_result": "verified" | "not_found" | "ambiguous",
  "confidence_percentage": 85,
  "customer_id": "CUST-12345",
  "customer_name": "John Doe",
  "actor": "self" | "spouse",
  "match_details": "SSN exact match; Name exact match",
  "search_strategy_used": "SSN + Name combination",
  "recommendation": "Proceed with high confidence"
}
```

### Request Analysis Agent Enhancement Details
**New Response Format:**
```
## REQUEST ANALYSIS
[Complete request details and current context]

## NEXT AGENT
**Agent:** [Agent name]

## INSTRUCTIONS FOR NEXT AGENT
[Detailed, specific instructions including:
- Key information to verify/process
- Specific documents or data points to examine
- Expected outputs or decisions needed
- Any special considerations or requirements]

## CONTEXT SUMMARY
[Brief summary of workflow progress and what has been completed so far]
```

**Orchestrator Updates:**
- Updated selector prompt to parse agent name from "## NEXT AGENT" section
- Enhanced parsing instructions for the new detailed format

### Next Steps
[X] **Configuration is complete and ready for AutoGen Studio**
- JSON syntax is valid
- All agents properly configured
- Mock data system working
- Tool integration successful
- Request Analysis Agent provides comprehensive briefings
- Customer Verification Agent supports intelligent fuzzy search with confidence scoring

The configuration should now work properly in AutoGen Studio with the streamlined sequential workflow, natural language rule-based orchestration, detailed agent briefings, and intelligent customer verification with confidence scoring.
